随着软件环境和需求的变化 软件的架构由单体结构演变为分布式架构 具有分布式架构的系统叫分布式系统
分布式系统的运行通畅依赖网络 它将单体结构的系统分为若干的服务 服务之间通过网络交互来完成用户的业务处理
分布式系统的特点
	分布性 每个部分都可以独立部署 服务之间都可以独立部署 服务之间交互通过网络进行通信
	伸缩性 每个部分都可以集群方式部署 并可针对部分节点进行硬件及软件扩容 具有一定的伸缩能力
	共享性 每个部分都可以作为共享资源对外提供服务 多个部分可能有操作共享资源的情况
	开放性 每个部分根据需求都可以对外发布共享资源的访问接口 并可允许第三方系统访问

分布式认证需求
	分布式的每个服务都会有认证授权的需求 每一个服务都实现一套认证授权逻辑代码会非常冗余
	考虑分布式的共享性特点 需要由独立的认证服务处理系统认证授权的请求
	考虑分布式系统开放性的特点 不仅对内部服务提供认证 对第三方系统也提供认证
	统一认证授权
		提供独立的认证服务 统一处理认证授权
		无论是不同类型的用户 还是不同种类的客户端（web H5 APP） 均采用一致的认证 权限 会话机制 实现统一认证授权
		要实现统一则认证方式必须可扩展 支持各种认证需求 如用户名密码认证 短信认证 二维码 人脸识别等认证方式
	应用接入认证
		应提供扩展和开放能力 提供安全的系统对接机制 并可开放部分API给接入第三方使用
		内部系统服务和第三方应用均采用统一机制接入

分布式认证方案
1.基于session的认证方式 
	在分布式环境中 基于session的认证会出现一个问题 每个应用服务都需要在session中存储用户身份信息
	通过负载均衡将本地的请求分配到另一个应用服务需要将session信息带过去 否则要重新认证
	通常做法：Session复制 Session粘贴 Session集中存储
	总体来讲 基于session的认证方式 可以更好的在服务端对会话进行控制 且安全性较高
	但是session机制方式基于cookie 在复杂多样的移动客户端上不能有效的使用 并且无法跨域 随着系统的扩展需提高session存储的容错性
2.基于token的认证方式
	服务端不用存储认证数据 易维护扩展性强 客户端可以把token存放在任意地方 并且可以实现web和app统一认证机制
	token包含信息 因此一般数据量较大 而且每次请求都需要传递 毕竟占宽带
	token的签名验签操作也会给Cpu带来额外的处理负担
技术方案
	适合统一认证的机制 客户端 内部系统 第三方应用都遵循一致的认证机制
	token认证方式对第三方应用接入更适合 因为它更开放 可使用当前流行的开放协议OAuth2.0 JWT等
	一般情况服务端无需存储会话信息 减轻了服务端的压力
认证流程
	1.接入方请求授权认证服务器
	2.通过网关访问微服务 验证登录用户及接入客户端
	3.返回token
	4.携带token访问资源
	5.校验token 验证接入客户端权限
	6.附加解析后明文token 转发请求到服务
	7.解析并验证用户权限 若通过则执行业务逻辑